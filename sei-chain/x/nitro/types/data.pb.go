// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nitro/data.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransactionData struct {
	Slot            uint64         `protobuf:"varint,1,opt,name=slot,proto3" json:"slot"`
	Signature       string         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature"`
	IsVote          bool           `protobuf:"varint,3,opt,name=is_vote,json=isVote,proto3" json:"is_vote"`
	MessageType     uint64         `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3" json:"message_type"`
	LegacyMessage   *LegacyMessage `protobuf:"bytes,5,opt,name=legacy_message,json=legacyMessage,proto3" json:"legacy_message"`
	V0LoadedMessage *LoadedMessage `protobuf:"bytes,6,opt,name=v0_loaded_message,json=v0LoadedMessage,proto3" json:"v0_loaded_message"`
	Signatures      []string       `protobuf:"bytes,7,rep,name=signatures,proto3" json:"signatures"`
	MessageHash     string         `protobuf:"bytes,8,opt,name=message_hash,json=messageHash,proto3" json:"message_hash"`
	WriteVersion    uint64         `protobuf:"varint,9,opt,name=write_version,json=writeVersion,proto3" json:"write_version"`
}

func (m *TransactionData) Reset()         { *m = TransactionData{} }
func (m *TransactionData) String() string { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()    {}
func (*TransactionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{0}
}
func (m *TransactionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionData.Merge(m, src)
}
func (m *TransactionData) XXX_Size() int {
	return m.Size()
}
func (m *TransactionData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionData.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionData proto.InternalMessageInfo

func (m *TransactionData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *TransactionData) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *TransactionData) GetIsVote() bool {
	if m != nil {
		return m.IsVote
	}
	return false
}

func (m *TransactionData) GetMessageType() uint64 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *TransactionData) GetLegacyMessage() *LegacyMessage {
	if m != nil {
		return m.LegacyMessage
	}
	return nil
}

func (m *TransactionData) GetV0LoadedMessage() *LoadedMessage {
	if m != nil {
		return m.V0LoadedMessage
	}
	return nil
}

func (m *TransactionData) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *TransactionData) GetMessageHash() string {
	if m != nil {
		return m.MessageHash
	}
	return ""
}

func (m *TransactionData) GetWriteVersion() uint64 {
	if m != nil {
		return m.WriteVersion
	}
	return 0
}

type LegacyMessage struct {
	Header          *MessageHeader         `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	AccountKeys     []string               `protobuf:"bytes,2,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys"`
	RecentBlockhash string                 `protobuf:"bytes,3,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash"`
	Instructions    []*CompiledInstruction `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions"`
}

func (m *LegacyMessage) Reset()         { *m = LegacyMessage{} }
func (m *LegacyMessage) String() string { return proto.CompactTextString(m) }
func (*LegacyMessage) ProtoMessage()    {}
func (*LegacyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{1}
}
func (m *LegacyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyMessage.Merge(m, src)
}
func (m *LegacyMessage) XXX_Size() int {
	return m.Size()
}
func (m *LegacyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyMessage proto.InternalMessageInfo

func (m *LegacyMessage) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LegacyMessage) GetAccountKeys() []string {
	if m != nil {
		return m.AccountKeys
	}
	return nil
}

func (m *LegacyMessage) GetRecentBlockhash() string {
	if m != nil {
		return m.RecentBlockhash
	}
	return ""
}

func (m *LegacyMessage) GetInstructions() []*CompiledInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type LoadedMessage struct {
	Message         *Message         `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	LoadedAddresses *LoadedAddresses `protobuf:"bytes,2,opt,name=loaded_addresses,json=loadedAddresses,proto3" json:"loaded_addresses"`
}

func (m *LoadedMessage) Reset()         { *m = LoadedMessage{} }
func (m *LoadedMessage) String() string { return proto.CompactTextString(m) }
func (*LoadedMessage) ProtoMessage()    {}
func (*LoadedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{2}
}
func (m *LoadedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadedMessage.Merge(m, src)
}
func (m *LoadedMessage) XXX_Size() int {
	return m.Size()
}
func (m *LoadedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LoadedMessage proto.InternalMessageInfo

func (m *LoadedMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *LoadedMessage) GetLoadedAddresses() *LoadedAddresses {
	if m != nil {
		return m.LoadedAddresses
	}
	return nil
}

type Message struct {
	Header              *MessageHeader               `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	AccountKeys         []string                     `protobuf:"bytes,2,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys"`
	RecentBlockhash     string                       `protobuf:"bytes,3,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash"`
	Instructions        []*CompiledInstruction       `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions"`
	AddressTableLookups []*MessageAddressTableLookup `protobuf:"bytes,5,rep,name=address_table_lookups,json=addressTableLookups,proto3" json:"address_table_lookups"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{3}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetAccountKeys() []string {
	if m != nil {
		return m.AccountKeys
	}
	return nil
}

func (m *Message) GetRecentBlockhash() string {
	if m != nil {
		return m.RecentBlockhash
	}
	return ""
}

func (m *Message) GetInstructions() []*CompiledInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *Message) GetAddressTableLookups() []*MessageAddressTableLookup {
	if m != nil {
		return m.AddressTableLookups
	}
	return nil
}

type MessageHeader struct {
	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures"`
	NumReadonlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts"`
	NumReadonlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts"`
}

func (m *MessageHeader) Reset()         { *m = MessageHeader{} }
func (m *MessageHeader) String() string { return proto.CompactTextString(m) }
func (*MessageHeader) ProtoMessage()    {}
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{4}
}
func (m *MessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeader.Merge(m, src)
}
func (m *MessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeader proto.InternalMessageInfo

func (m *MessageHeader) GetNumRequiredSignatures() uint32 {
	if m != nil {
		return m.NumRequiredSignatures
	}
	return 0
}

func (m *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if m != nil {
		return m.NumReadonlySignedAccounts
	}
	return 0
}

func (m *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if m != nil {
		return m.NumReadonlyUnsignedAccounts
	}
	return 0
}

type CompiledInstruction struct {
	ProgramIdIndex uint32   `protobuf:"varint,1,opt,name=program_id_index,json=programIdIndex,proto3" json:"program_id_index"`
	Accounts       []uint32 `protobuf:"varint,2,rep,packed,name=accounts,proto3" json:"accounts"`
	Data           string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (m *CompiledInstruction) Reset()         { *m = CompiledInstruction{} }
func (m *CompiledInstruction) String() string { return proto.CompactTextString(m) }
func (*CompiledInstruction) ProtoMessage()    {}
func (*CompiledInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{5}
}
func (m *CompiledInstruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompiledInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompiledInstruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompiledInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompiledInstruction.Merge(m, src)
}
func (m *CompiledInstruction) XXX_Size() int {
	return m.Size()
}
func (m *CompiledInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_CompiledInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_CompiledInstruction proto.InternalMessageInfo

func (m *CompiledInstruction) GetProgramIdIndex() uint32 {
	if m != nil {
		return m.ProgramIdIndex
	}
	return 0
}

func (m *CompiledInstruction) GetAccounts() []uint32 {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *CompiledInstruction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MessageAddressTableLookup struct {
	AccountKey      string   `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key"`
	WritableIndexes []uint32 `protobuf:"varint,2,rep,packed,name=writable_indexes,json=writableIndexes,proto3" json:"writable_indexes"`
	ReadonlyIndexes []uint32 `protobuf:"varint,3,rep,packed,name=readonly_indexes,json=readonlyIndexes,proto3" json:"readonly_indexes"`
}

func (m *MessageAddressTableLookup) Reset()         { *m = MessageAddressTableLookup{} }
func (m *MessageAddressTableLookup) String() string { return proto.CompactTextString(m) }
func (*MessageAddressTableLookup) ProtoMessage()    {}
func (*MessageAddressTableLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{6}
}
func (m *MessageAddressTableLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAddressTableLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAddressTableLookup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageAddressTableLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAddressTableLookup.Merge(m, src)
}
func (m *MessageAddressTableLookup) XXX_Size() int {
	return m.Size()
}
func (m *MessageAddressTableLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAddressTableLookup.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAddressTableLookup proto.InternalMessageInfo

func (m *MessageAddressTableLookup) GetAccountKey() string {
	if m != nil {
		return m.AccountKey
	}
	return ""
}

func (m *MessageAddressTableLookup) GetWritableIndexes() []uint32 {
	if m != nil {
		return m.WritableIndexes
	}
	return nil
}

func (m *MessageAddressTableLookup) GetReadonlyIndexes() []uint32 {
	if m != nil {
		return m.ReadonlyIndexes
	}
	return nil
}

type LoadedAddresses struct {
	Writable []string `protobuf:"bytes,1,rep,name=writable,proto3" json:"writable"`
	Readonly []string `protobuf:"bytes,2,rep,name=readonly,proto3" json:"readonly"`
}

func (m *LoadedAddresses) Reset()         { *m = LoadedAddresses{} }
func (m *LoadedAddresses) String() string { return proto.CompactTextString(m) }
func (*LoadedAddresses) ProtoMessage()    {}
func (*LoadedAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{7}
}
func (m *LoadedAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadedAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadedAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadedAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadedAddresses.Merge(m, src)
}
func (m *LoadedAddresses) XXX_Size() int {
	return m.Size()
}
func (m *LoadedAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadedAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_LoadedAddresses proto.InternalMessageInfo

func (m *LoadedAddresses) GetWritable() []string {
	if m != nil {
		return m.Writable
	}
	return nil
}

func (m *LoadedAddresses) GetReadonly() []string {
	if m != nil {
		return m.Readonly
	}
	return nil
}

type MerkleProof struct {
	Commitment string   `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment"`
	Hash       []string `protobuf:"bytes,2,rep,name=hash,proto3" json:"hash"`
	Direction  []int64  `protobuf:"varint,3,rep,packed,name=direction,proto3" json:"direction"`
}

func (m *MerkleProof) Reset()         { *m = MerkleProof{} }
func (m *MerkleProof) String() string { return proto.CompactTextString(m) }
func (*MerkleProof) ProtoMessage()    {}
func (*MerkleProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7cd900d11b0c050, []int{8}
}
func (m *MerkleProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleProof.Merge(m, src)
}
func (m *MerkleProof) XXX_Size() int {
	return m.Size()
}
func (m *MerkleProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleProof.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleProof proto.InternalMessageInfo

func (m *MerkleProof) GetCommitment() string {
	if m != nil {
		return m.Commitment
	}
	return ""
}

func (m *MerkleProof) GetHash() []string {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MerkleProof) GetDirection() []int64 {
	if m != nil {
		return m.Direction
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionData)(nil), "seiprotocol.seichain.nitro.TransactionData")
	proto.RegisterType((*LegacyMessage)(nil), "seiprotocol.seichain.nitro.LegacyMessage")
	proto.RegisterType((*LoadedMessage)(nil), "seiprotocol.seichain.nitro.LoadedMessage")
	proto.RegisterType((*Message)(nil), "seiprotocol.seichain.nitro.Message")
	proto.RegisterType((*MessageHeader)(nil), "seiprotocol.seichain.nitro.MessageHeader")
	proto.RegisterType((*CompiledInstruction)(nil), "seiprotocol.seichain.nitro.CompiledInstruction")
	proto.RegisterType((*MessageAddressTableLookup)(nil), "seiprotocol.seichain.nitro.MessageAddressTableLookup")
	proto.RegisterType((*LoadedAddresses)(nil), "seiprotocol.seichain.nitro.LoadedAddresses")
	proto.RegisterType((*MerkleProof)(nil), "seiprotocol.seichain.nitro.MerkleProof")
}

func init() { proto.RegisterFile("nitro/data.proto", fileDescriptor_b7cd900d11b0c050) }

var fileDescriptor_b7cd900d11b0c050 = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x73, 0xe3, 0xc4,
	0x17, 0x8f, 0x62, 0x5f, 0x12, 0xaf, 0xe3, 0xd8, 0xb7, 0x77, 0x99, 0xaf, 0x72, 0x77, 0x63, 0x79,
	0xf4, 0xa5, 0x30, 0x73, 0x83, 0x9d, 0xc9, 0x0d, 0x94, 0x30, 0x27, 0x28, 0xce, 0x70, 0x99, 0x61,
	0x36, 0xe1, 0x0a, 0x1a, 0xcd, 0x46, 0x5a, 0xec, 0x9d, 0xc8, 0x5a, 0xa3, 0x95, 0xc3, 0xb9, 0xa7,
	0xa0, 0xe4, 0x1f, 0xa0, 0xa7, 0xa4, 0x87, 0x3f, 0x00, 0x2a, 0xae, 0xa4, 0xd2, 0x30, 0x49, 0xa7,
	0xbf, 0x82, 0xd9, 0xb7, 0x2b, 0x5b, 0x72, 0x2e, 0x97, 0xd0, 0xd3, 0xd8, 0xef, 0x7d, 0xde, 0x2f,
	0xed, 0xe7, 0xbd, 0x7d, 0x12, 0xea, 0xc4, 0x3c, 0x4d, 0xc4, 0x30, 0xa4, 0x29, 0x1d, 0xcc, 0x12,
	0x91, 0x0a, 0xfc, 0x48, 0x32, 0x0e, 0x52, 0x20, 0xa2, 0x81, 0x64, 0x3c, 0x98, 0x50, 0x1e, 0x0f,
	0xc0, 0xed, 0xd1, 0xc3, 0xb1, 0x18, 0x0b, 0x30, 0x0e, 0x95, 0xa4, 0x23, 0xdc, 0x9f, 0xeb, 0xa8,
	0x7d, 0x9a, 0xd0, 0x58, 0xd2, 0x20, 0xe5, 0x22, 0xfe, 0x8c, 0xa6, 0x14, 0x3f, 0x41, 0x75, 0x19,
	0x89, 0xd4, 0xb6, 0x7a, 0x56, 0xbf, 0xee, 0xed, 0xe4, 0x99, 0x03, 0x3a, 0x81, 0x5f, 0xfc, 0x14,
	0x35, 0x24, 0x1f, 0xc7, 0x34, 0x9d, 0x27, 0xcc, 0xde, 0xec, 0x59, 0xfd, 0x86, 0xd7, 0xca, 0x33,
	0x67, 0x05, 0x92, 0x95, 0x88, 0xdf, 0x43, 0xdb, 0x5c, 0xfa, 0x17, 0x22, 0x65, 0x76, 0xad, 0x67,
	0xf5, 0x77, 0xbc, 0x66, 0x9e, 0x39, 0x05, 0x44, 0xb6, 0xb8, 0x7c, 0x25, 0x52, 0x86, 0x9f, 0xa1,
	0xdd, 0x29, 0x93, 0x92, 0x8e, 0x99, 0x9f, 0x2e, 0x66, 0xcc, 0xae, 0x43, 0xe1, 0x4e, 0x9e, 0x39,
	0x15, 0x9c, 0x34, 0x8d, 0x76, 0xba, 0x98, 0x31, 0x1c, 0xa2, 0xbd, 0x88, 0x8d, 0x69, 0xb0, 0xf0,
	0x0d, 0x6a, 0xdf, 0xeb, 0x59, 0xfd, 0xe6, 0xd1, 0xfb, 0x83, 0x9b, 0x49, 0x18, 0xbc, 0x84, 0x88,
	0x63, 0x1d, 0xe0, 0xe1, 0x3c, 0x73, 0xd6, 0x92, 0x90, 0x56, 0x54, 0x76, 0xc1, 0x11, 0xba, 0x7f,
	0x71, 0xe8, 0x47, 0x82, 0x86, 0x2c, 0x5c, 0x16, 0xda, 0xba, 0x43, 0x21, 0x88, 0x28, 0x0a, 0xed,
	0xe7, 0x99, 0x73, 0x3d, 0x0f, 0x69, 0x5f, 0x1c, 0x56, 0xfc, 0xf0, 0x00, 0xa1, 0x25, 0x77, 0xd2,
	0xde, 0xee, 0xd5, 0xfa, 0x0d, 0x6f, 0x2f, 0xcf, 0x9c, 0x12, 0x4a, 0x4a, 0x72, 0x99, 0xb8, 0x09,
	0x95, 0x13, 0x7b, 0x07, 0xda, 0x51, 0x21, 0x4e, 0xe1, 0x4b, 0xe2, 0x5e, 0x50, 0x39, 0xc1, 0x1f,
	0xa1, 0xd6, 0x77, 0x09, 0x4f, 0x99, 0x7f, 0xc1, 0x12, 0xc9, 0x45, 0x6c, 0x37, 0x80, 0xee, 0xfb,
	0x79, 0xe6, 0x54, 0x0d, 0x64, 0x17, 0xd4, 0x57, 0x5a, 0x73, 0x7f, 0xdd, 0x44, 0xad, 0x0a, 0x7f,
	0xf8, 0x18, 0x6d, 0x4d, 0x18, 0x0d, 0x59, 0x02, 0xa3, 0x72, 0x0b, 0x23, 0x26, 0xe8, 0x05, 0x04,
	0x78, 0x28, 0xcf, 0x1c, 0x13, 0x4c, 0xcc, 0xbf, 0x3a, 0x0d, 0x0d, 0x02, 0x31, 0x8f, 0x53, 0xff,
	0x9c, 0x2d, 0xa4, 0xbd, 0x09, 0xe7, 0x87, 0xd3, 0x94, 0x71, 0xd2, 0x34, 0xda, 0x17, 0x6c, 0x21,
	0xf1, 0x27, 0xa8, 0x93, 0xb0, 0x80, 0xc5, 0xa9, 0x7f, 0x16, 0x89, 0xe0, 0x1c, 0x68, 0xa8, 0x01,
	0x0d, 0x0f, 0xf3, 0xcc, 0xb9, 0x66, 0x23, 0x6d, 0x8d, 0x78, 0x05, 0x80, 0x19, 0xda, 0xe5, 0xb1,
	0x4c, 0x93, 0x39, 0x5c, 0x00, 0x69, 0xd7, 0x7b, 0xb5, 0x7e, 0xf3, 0x68, 0xf8, 0xae, 0xa3, 0x7c,
	0x2a, 0xa6, 0x33, 0x1e, 0xb1, 0x70, 0xb4, 0x8a, 0xd3, 0x8f, 0x59, 0x4e, 0x44, 0x2a, 0x9a, 0xfb,
	0x87, 0x85, 0x5a, 0xd5, 0x66, 0x7f, 0x8e, 0xb6, 0x8b, 0x81, 0xd2, 0xf4, 0xfd, 0xff, 0x0e, 0xf4,
	0xe9, 0x0b, 0x54, 0x0c, 0x50, 0x21, 0xe0, 0x08, 0x75, 0xcc, 0x6c, 0xd1, 0x30, 0x4c, 0x98, 0x94,
	0x4c, 0xc2, 0xdd, 0x6c, 0x1e, 0x3d, 0xbd, 0x7d, 0x4a, 0x9f, 0x17, 0x21, 0x9a, 0xb2, 0xf5, 0x44,
	0xa4, 0x1d, 0x55, 0xdd, 0xdc, 0xdf, 0x6a, 0x68, 0xfb, 0xbf, 0x19, 0xf8, 0xd7, 0x33, 0x80, 0xbf,
	0xb7, 0xd0, 0xbe, 0xa1, 0xd5, 0x4f, 0xe9, 0x59, 0xc4, 0xfc, 0x48, 0x88, 0xf3, 0xf9, 0x4c, 0xda,
	0xf7, 0xa0, 0xe0, 0x87, 0x77, 0xe0, 0xce, 0x74, 0xe1, 0x54, 0x85, 0xbf, 0x84, 0x68, 0xef, 0x20,
	0xcf, 0x9c, 0xb7, 0xe7, 0x25, 0x0f, 0xe8, 0x35, 0x77, 0xe9, 0xfe, 0xb2, 0x89, 0x5a, 0x95, 0x4e,
	0xe0, 0x13, 0xf4, 0xbf, 0x78, 0x3e, 0xf5, 0x13, 0xf6, 0xed, 0x9c, 0x27, 0x2c, 0xf4, 0x4b, 0x4b,
	0x48, 0x75, 0xb5, 0xe5, 0x3d, 0xce, 0x33, 0xe7, 0x26, 0x17, 0xb2, 0x1f, 0xcf, 0xa7, 0xc4, 0xe0,
	0x27, 0xab, 0xe5, 0x44, 0xd1, 0x13, 0x1d, 0x41, 0x43, 0x11, 0x47, 0x0b, 0x88, 0x50, 0x73, 0xa5,
	0x1b, 0xa7, 0xe7, 0xb3, 0xe5, 0xf5, 0xf2, 0xcc, 0x79, 0xa7, 0x1f, 0x39, 0x80, 0xf4, 0xda, 0x78,
	0x02, 0xb6, 0xe7, 0xc6, 0x84, 0xc7, 0xa8, 0x5b, 0x09, 0x9d, 0xc7, 0xeb, 0x45, 0x6a, 0x50, 0xc4,
	0xcd, 0x33, 0xe7, 0x16, 0x4f, 0xf2, 0xb8, 0x54, 0xe6, 0x2b, 0x63, 0x2d, 0x0a, 0xb9, 0x3f, 0x59,
	0xe8, 0xc1, 0x5b, 0x3a, 0x8e, 0x3f, 0x46, 0x9d, 0x59, 0x22, 0xc6, 0x09, 0x9d, 0xfa, 0x3c, 0xf4,
	0x79, 0x1c, 0xb2, 0xd7, 0x86, 0x31, 0x98, 0xbc, 0x75, 0x1b, 0xd9, 0x33, 0xc8, 0x28, 0x1c, 0x29,
	0x1d, 0xf7, 0xd1, 0x4e, 0x89, 0x8f, 0x5a, 0xbf, 0xe5, 0xed, 0xe6, 0x99, 0xb3, 0xc4, 0xc8, 0x52,
	0x52, 0x2f, 0x65, 0xf5, 0xa2, 0x37, 0x73, 0x0d, 0x2f, 0x65, 0xa5, 0x13, 0xf8, 0x75, 0xff, 0xb4,
	0xd0, 0xc1, 0x8d, 0x03, 0x82, 0x0f, 0x51, 0xb3, 0x74, 0x79, 0xe0, 0x01, 0x1b, 0x5e, 0x3b, 0xcf,
	0x9c, 0x32, 0x4c, 0xd0, 0xea, 0x4a, 0xa9, 0x1b, 0xa5, 0x76, 0x3f, 0xcc, 0x12, 0x3c, 0x39, 0x2b,
	0x9e, 0x0f, 0xce, 0xb5, 0x6e, 0x23, 0xed, 0x02, 0x19, 0x69, 0x40, 0x5f, 0x49, 0xc3, 0x75, 0x91,
	0xa0, 0xb6, 0x4a, 0xb0, 0x6e, 0x53, 0x57, 0x52, 0x23, 0x26, 0x81, 0xcb, 0x50, 0x7b, 0x6d, 0x3b,
	0x29, 0xb2, 0x8a, 0x32, 0xb6, 0x05, 0x7b, 0x01, 0xc8, 0x2a, 0x30, 0xb2, 0x94, 0x94, 0x67, 0x91,
	0xcf, 0x6c, 0x10, 0xf0, 0x2c, 0x30, 0xb2, 0x94, 0xdc, 0x1f, 0x2c, 0xd4, 0x3c, 0x66, 0xc9, 0x79,
	0xc4, 0xbe, 0x4c, 0x84, 0xf8, 0x46, 0xbd, 0x81, 0x03, 0x31, 0x9d, 0xf2, 0x74, 0xca, 0xe2, 0xd4,
	0x30, 0x05, 0x6f, 0xe0, 0x15, 0x4a, 0x4a, 0xb2, 0x6a, 0x0b, 0xac, 0x1b, 0x5d, 0x05, 0xda, 0x02,
	0x2b, 0x06, 0x7e, 0xd5, 0xb7, 0x52, 0xc8, 0x13, 0x06, 0xb3, 0x02, 0xc7, 0xaf, 0xe9, 0x6f, 0xa5,
	0x25, 0x48, 0x56, 0xa2, 0x37, 0xfa, 0xfd, 0xb2, 0x6b, 0xbd, 0xb9, 0xec, 0x5a, 0x7f, 0x5f, 0x76,
	0xad, 0x1f, 0xaf, 0xba, 0x1b, 0x6f, 0xae, 0xba, 0x1b, 0x7f, 0x5d, 0x75, 0x37, 0xbe, 0x1e, 0x8e,
	0x79, 0x3a, 0x99, 0x9f, 0x0d, 0x02, 0x31, 0x1d, 0x4a, 0xc6, 0x3f, 0x28, 0x56, 0x04, 0x28, 0xb0,
	0x23, 0x86, 0xaf, 0x87, 0xfa, 0x63, 0x50, 0x7d, 0x27, 0xc9, 0xb3, 0x2d, 0xf0, 0x78, 0xf6, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x5f, 0xa4, 0x9a, 0x22, 0x0a, 0x00, 0x00,
}

func (m *TransactionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WriteVersion != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.WriteVersion))
		i--
		dAtA[i] = 0x48
	}
	if len(m.MessageHash) > 0 {
		i -= len(m.MessageHash)
		copy(dAtA[i:], m.MessageHash)
		i = encodeVarintData(dAtA, i, uint64(len(m.MessageHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.V0LoadedMessage != nil {
		{
			size, err := m.V0LoadedMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LegacyMessage != nil {
		{
			size, err := m.LegacyMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageType != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x20
	}
	if m.IsVote {
		i--
		if m.IsVote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintData(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Slot != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LegacyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instructions) > 0 {
		for iNdEx := len(m.Instructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RecentBlockhash) > 0 {
		i -= len(m.RecentBlockhash)
		copy(dAtA[i:], m.RecentBlockhash)
		i = encodeVarintData(dAtA, i, uint64(len(m.RecentBlockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountKeys) > 0 {
		for iNdEx := len(m.AccountKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccountKeys[iNdEx])
			copy(dAtA[i:], m.AccountKeys[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.AccountKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadedAddresses != nil {
		{
			size, err := m.LoadedAddresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressTableLookups) > 0 {
		for iNdEx := len(m.AddressTableLookups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressTableLookups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Instructions) > 0 {
		for iNdEx := len(m.Instructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RecentBlockhash) > 0 {
		i -= len(m.RecentBlockhash)
		copy(dAtA[i:], m.RecentBlockhash)
		i = encodeVarintData(dAtA, i, uint64(len(m.RecentBlockhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountKeys) > 0 {
		for iNdEx := len(m.AccountKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccountKeys[iNdEx])
			copy(dAtA[i:], m.AccountKeys[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.AccountKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumReadonlyUnsignedAccounts != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.NumReadonlyUnsignedAccounts))
		i--
		dAtA[i] = 0x18
	}
	if m.NumReadonlySignedAccounts != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.NumReadonlySignedAccounts))
		i--
		dAtA[i] = 0x10
	}
	if m.NumRequiredSignatures != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.NumRequiredSignatures))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompiledInstruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompiledInstruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompiledInstruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintData(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Accounts) > 0 {
		dAtA8 := make([]byte, len(m.Accounts)*10)
		var j7 int
		for _, num := range m.Accounts {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintData(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.ProgramIdIndex != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.ProgramIdIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageAddressTableLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAddressTableLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageAddressTableLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReadonlyIndexes) > 0 {
		dAtA10 := make([]byte, len(m.ReadonlyIndexes)*10)
		var j9 int
		for _, num := range m.ReadonlyIndexes {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintData(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WritableIndexes) > 0 {
		dAtA12 := make([]byte, len(m.WritableIndexes)*10)
		var j11 int
		for _, num := range m.WritableIndexes {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintData(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountKey) > 0 {
		i -= len(m.AccountKey)
		copy(dAtA[i:], m.AccountKey)
		i = encodeVarintData(dAtA, i, uint64(len(m.AccountKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadedAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadedAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadedAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Readonly) > 0 {
		for iNdEx := len(m.Readonly) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Readonly[iNdEx])
			copy(dAtA[i:], m.Readonly[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.Readonly[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Writable) > 0 {
		for iNdEx := len(m.Writable) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Writable[iNdEx])
			copy(dAtA[i:], m.Writable[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.Writable[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MerkleProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Direction) > 0 {
		dAtA14 := make([]byte, len(m.Direction)*10)
		var j13 int
		for _, num1 := range m.Direction {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintData(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		for iNdEx := len(m.Hash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hash[iNdEx])
			copy(dAtA[i:], m.Hash[iNdEx])
			i = encodeVarintData(dAtA, i, uint64(len(m.Hash[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintData(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	offset -= sovData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovData(uint64(m.Slot))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.IsVote {
		n += 2
	}
	if m.MessageType != 0 {
		n += 1 + sovData(uint64(m.MessageType))
	}
	if m.LegacyMessage != nil {
		l = m.LegacyMessage.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.V0LoadedMessage != nil {
		l = m.V0LoadedMessage.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.WriteVersion != 0 {
		n += 1 + sovData(uint64(m.WriteVersion))
	}
	return n
}

func (m *LegacyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.AccountKeys) > 0 {
		for _, s := range m.AccountKeys {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	l = len(m.RecentBlockhash)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *LoadedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.LoadedAddresses != nil {
		l = m.LoadedAddresses.Size()
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.AccountKeys) > 0 {
		for _, s := range m.AccountKeys {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	l = len(m.RecentBlockhash)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if len(m.AddressTableLookups) > 0 {
		for _, e := range m.AddressTableLookups {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *MessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRequiredSignatures != 0 {
		n += 1 + sovData(uint64(m.NumRequiredSignatures))
	}
	if m.NumReadonlySignedAccounts != 0 {
		n += 1 + sovData(uint64(m.NumReadonlySignedAccounts))
	}
	if m.NumReadonlyUnsignedAccounts != 0 {
		n += 1 + sovData(uint64(m.NumReadonlyUnsignedAccounts))
	}
	return n
}

func (m *CompiledInstruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramIdIndex != 0 {
		n += 1 + sovData(uint64(m.ProgramIdIndex))
	}
	if len(m.Accounts) > 0 {
		l = 0
		for _, e := range m.Accounts {
			l += sovData(uint64(e))
		}
		n += 1 + sovData(uint64(l)) + l
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *MessageAddressTableLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountKey)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.WritableIndexes) > 0 {
		l = 0
		for _, e := range m.WritableIndexes {
			l += sovData(uint64(e))
		}
		n += 1 + sovData(uint64(l)) + l
	}
	if len(m.ReadonlyIndexes) > 0 {
		l = 0
		for _, e := range m.ReadonlyIndexes {
			l += sovData(uint64(e))
		}
		n += 1 + sovData(uint64(l)) + l
	}
	return n
}

func (m *LoadedAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Writable) > 0 {
		for _, s := range m.Writable {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	if len(m.Readonly) > 0 {
		for _, s := range m.Readonly {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *MerkleProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Hash) > 0 {
		for _, s := range m.Hash {
			l = len(s)
			n += 1 + l + sovData(uint64(l))
		}
	}
	if len(m.Direction) > 0 {
		l = 0
		for _, e := range m.Direction {
			l += sovData(uint64(e))
		}
		n += 1 + sovData(uint64(l)) + l
	}
	return n
}

func sovData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVote = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LegacyMessage == nil {
				m.LegacyMessage = &LegacyMessage{}
			}
			if err := m.LegacyMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V0LoadedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V0LoadedMessage == nil {
				m.V0LoadedMessage = &LoadedMessage{}
			}
			if err := m.V0LoadedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteVersion", wireType)
			}
			m.WriteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKeys = append(m.AccountKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentBlockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentBlockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CompiledInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadedAddresses == nil {
				m.LoadedAddresses = &LoadedAddresses{}
			}
			if err := m.LoadedAddresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKeys = append(m.AccountKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentBlockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentBlockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CompiledInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressTableLookups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressTableLookups = append(m.AddressTableLookups, &MessageAddressTableLookup{})
			if err := m.AddressTableLookups[len(m.AddressTableLookups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRequiredSignatures", wireType)
			}
			m.NumRequiredSignatures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRequiredSignatures |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReadonlySignedAccounts", wireType)
			}
			m.NumReadonlySignedAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReadonlySignedAccounts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReadonlyUnsignedAccounts", wireType)
			}
			m.NumReadonlyUnsignedAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReadonlyUnsignedAccounts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompiledInstruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompiledInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompiledInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramIdIndex", wireType)
			}
			m.ProgramIdIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramIdIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Accounts = append(m.Accounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Accounts) == 0 {
					m.Accounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Accounts = append(m.Accounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAddressTableLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAddressTableLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAddressTableLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WritableIndexes = append(m.WritableIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WritableIndexes) == 0 {
					m.WritableIndexes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WritableIndexes = append(m.WritableIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WritableIndexes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReadonlyIndexes = append(m.ReadonlyIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReadonlyIndexes) == 0 {
					m.ReadonlyIndexes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReadonlyIndexes = append(m.ReadonlyIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadonlyIndexes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadedAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadedAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadedAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writable = append(m.Writable, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readonly = append(m.Readonly, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Direction = append(m.Direction, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Direction) == 0 {
					m.Direction = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Direction = append(m.Direction, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupData = fmt.Errorf("proto: unexpected end of group")
)
