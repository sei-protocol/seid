// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/order_placement.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderPlacement struct {
	PositionDirection PositionDirection                      `protobuf:"varint,1,opt,name=positionDirection,proto3,enum=seiprotocol.seichain.dex.PositionDirection" json:"position_direction"`
	Price             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
	Quantity          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity" yaml:"quantity"`
	PriceDenom        Denom                                  `protobuf:"varint,4,opt,name=priceDenom,proto3,enum=seiprotocol.seichain.dex.Denom" json:"price_denom"`
	AssetDenom        Denom                                  `protobuf:"varint,5,opt,name=assetDenom,proto3,enum=seiprotocol.seichain.dex.Denom" json:"asset_denom"`
	PositionEffect    PositionEffect                         `protobuf:"varint,6,opt,name=positionEffect,proto3,enum=seiprotocol.seichain.dex.PositionEffect" json:"position_effect"`
	OrderType         OrderType                              `protobuf:"varint,7,opt,name=orderType,proto3,enum=seiprotocol.seichain.dex.OrderType" json:"order_type"`
	Leverage          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=leverage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"leverage" yaml:"leverage"`
}

func (m *OrderPlacement) Reset()         { *m = OrderPlacement{} }
func (m *OrderPlacement) String() string { return proto.CompactTextString(m) }
func (*OrderPlacement) ProtoMessage()    {}
func (*OrderPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2471ad330c401e, []int{0}
}
func (m *OrderPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderPlacement.Merge(m, src)
}
func (m *OrderPlacement) XXX_Size() int {
	return m.Size()
}
func (m *OrderPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_OrderPlacement proto.InternalMessageInfo

func (m *OrderPlacement) GetPositionDirection() PositionDirection {
	if m != nil {
		return m.PositionDirection
	}
	return PositionDirection_LONG
}

func (m *OrderPlacement) GetPriceDenom() Denom {
	if m != nil {
		return m.PriceDenom
	}
	return Denom_SEI
}

func (m *OrderPlacement) GetAssetDenom() Denom {
	if m != nil {
		return m.AssetDenom
	}
	return Denom_SEI
}

func (m *OrderPlacement) GetPositionEffect() PositionEffect {
	if m != nil {
		return m.PositionEffect
	}
	return PositionEffect_OPEN
}

func (m *OrderPlacement) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_LIMIT
}

func init() {
	proto.RegisterType((*OrderPlacement)(nil), "seiprotocol.seichain.dex.OrderPlacement")
}

func init() { proto.RegisterFile("dex/order_placement.proto", fileDescriptor_ca2471ad330c401e) }

var fileDescriptor_ca2471ad330c401e = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x1b, 0x75, 0xeb, 0xee, 0x28, 0x2d, 0x46, 0x91, 0xb8, 0x87, 0xcc, 0x12, 0x41, 0x0a,
	0xd2, 0x04, 0xf4, 0xe6, 0x31, 0x54, 0xf6, 0x24, 0x5b, 0x83, 0x27, 0x41, 0x4a, 0x76, 0xf2, 0xb6,
	0x3b, 0xd8, 0x64, 0xb2, 0x99, 0xa9, 0xb4, 0xdf, 0xc2, 0x93, 0x9f, 0x69, 0x8f, 0x7b, 0x14, 0x0f,
	0x83, 0xb4, 0xb7, 0x1c, 0xf7, 0x13, 0xc8, 0xbc, 0x38, 0xe9, 0xb2, 0x52, 0xa4, 0x7b, 0xca, 0xcc,
	0xff, 0xbd, 0xf7, 0xfb, 0x33, 0xf3, 0x9f, 0x90, 0x17, 0x19, 0x2c, 0x22, 0x51, 0x65, 0x50, 0x4d,
	0xca, 0x59, 0xca, 0x20, 0x87, 0x42, 0x85, 0x65, 0x25, 0x94, 0x70, 0x3d, 0x09, 0x1c, 0x57, 0x4c,
	0xcc, 0x42, 0x09, 0x9c, 0x9d, 0xa7, 0xbc, 0x08, 0x33, 0x58, 0x1c, 0x3e, 0x9b, 0x8a, 0xa9, 0xc0,
	0x52, 0x64, 0x56, 0x4d, 0xff, 0x61, 0xdf, 0xa0, 0xa0, 0x98, 0xe7, 0xb2, 0x11, 0x82, 0x1f, 0x5d,
	0xd2, 0x3b, 0x31, 0xe8, 0xb1, 0x25, 0xbb, 0x17, 0xe4, 0x49, 0x29, 0x24, 0x57, 0x5c, 0x14, 0x23,
	0x5e, 0x01, 0x33, 0x0b, 0xcf, 0x39, 0x72, 0x06, 0xbd, 0x37, 0xaf, 0xc3, 0x6d, 0x7e, 0xe1, 0xf8,
	0xf6, 0x48, 0xfc, 0xbc, 0xd6, 0xd4, 0xb5, 0xa4, 0x49, 0x66, 0xf5, 0xe4, 0x5f, 0xba, 0xfb, 0x85,
	0xec, 0x95, 0x15, 0x67, 0xe0, 0xdd, 0x3b, 0x72, 0x06, 0x07, 0xf1, 0xf1, 0xa5, 0xa6, 0x9d, 0x5f,
	0x9a, 0xbe, 0x9a, 0x72, 0x75, 0x3e, 0x3f, 0x0d, 0x99, 0xc8, 0x23, 0x26, 0x64, 0x2e, 0xe4, 0xdf,
	0xcf, 0x50, 0x66, 0x5f, 0x23, 0xb5, 0x2c, 0x41, 0x86, 0x23, 0x60, 0xb5, 0xa6, 0xcd, 0xf8, 0xb5,
	0xa6, 0x8f, 0x97, 0x69, 0x3e, 0x7b, 0x17, 0xe0, 0x36, 0x48, 0x1a, 0xd9, 0xe5, 0x64, 0xff, 0x62,
	0x9e, 0x16, 0x8a, 0xab, 0xa5, 0x77, 0x1f, 0x1d, 0x3e, 0xec, 0xec, 0xd0, 0x12, 0xae, 0x35, 0xed,
	0x37, 0x26, 0x56, 0x09, 0x92, 0xb6, 0xe8, 0x8e, 0x09, 0x41, 0xcf, 0x11, 0x14, 0x22, 0xf7, 0x1e,
	0xe0, 0xad, 0xd1, 0xed, 0xb7, 0x86, 0x6d, 0x71, 0xbf, 0xd6, 0xf4, 0x11, 0x8e, 0x4d, 0x32, 0x23,
	0x24, 0x37, 0x18, 0x86, 0x98, 0x4a, 0x09, 0xaa, 0x21, 0xee, 0xed, 0x40, 0xc4, 0x31, 0x4b, 0xdc,
	0x30, 0x5c, 0x20, 0x3d, 0x1b, 0xc1, 0xfb, 0xb3, 0x33, 0x60, 0xca, 0xeb, 0x22, 0x75, 0xf0, 0xff,
	0x74, 0x9b, 0xfe, 0xf8, 0x69, 0xad, 0x69, 0xbf, 0x8d, 0x16, 0x50, 0x4c, 0x6e, 0x41, 0xdd, 0x8f,
	0xe4, 0x00, 0x1f, 0xed, 0xa7, 0x65, 0x09, 0xde, 0x43, 0x74, 0x78, 0xb9, 0xdd, 0xe1, 0xc4, 0xb6,
	0xc6, 0xbd, 0x5a, 0x53, 0xd2, 0x3c, 0x77, 0x13, 0x40, 0xb2, 0xa1, 0x98, 0x20, 0x67, 0xf0, 0x0d,
	0xaa, 0x74, 0x0a, 0xde, 0xfe, 0x5d, 0x83, 0xb4, 0x84, 0x4d, 0x90, 0x56, 0x09, 0x92, 0xb6, 0x18,
	0x1f, 0x5f, 0xae, 0x7c, 0xe7, 0x6a, 0xe5, 0x3b, 0xbf, 0x57, 0xbe, 0xf3, 0x7d, 0xed, 0x77, 0xae,
	0xd6, 0x7e, 0xe7, 0xe7, 0xda, 0xef, 0x7c, 0x1e, 0xde, 0xb0, 0x92, 0xc0, 0x87, 0xf6, 0x3c, 0xb8,
	0xc1, 0x03, 0x45, 0x8b, 0xc8, 0xfc, 0x67, 0xe8, 0x7a, 0xda, 0xc5, 0xfa, 0xdb, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0x07, 0xf4, 0xdd, 0xc6, 0x03, 0x00, 0x00,
}

func (m *OrderPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderPlacement(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.OrderType != 0 {
		i = encodeVarintOrderPlacement(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x38
	}
	if m.PositionEffect != 0 {
		i = encodeVarintOrderPlacement(dAtA, i, uint64(m.PositionEffect))
		i--
		dAtA[i] = 0x30
	}
	if m.AssetDenom != 0 {
		i = encodeVarintOrderPlacement(dAtA, i, uint64(m.AssetDenom))
		i--
		dAtA[i] = 0x28
	}
	if m.PriceDenom != 0 {
		i = encodeVarintOrderPlacement(dAtA, i, uint64(m.PriceDenom))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderPlacement(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderPlacement(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PositionDirection != 0 {
		i = encodeVarintOrderPlacement(dAtA, i, uint64(m.PositionDirection))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderPlacement(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderPlacement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionDirection != 0 {
		n += 1 + sovOrderPlacement(uint64(m.PositionDirection))
	}
	l = m.Price.Size()
	n += 1 + l + sovOrderPlacement(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovOrderPlacement(uint64(l))
	if m.PriceDenom != 0 {
		n += 1 + sovOrderPlacement(uint64(m.PriceDenom))
	}
	if m.AssetDenom != 0 {
		n += 1 + sovOrderPlacement(uint64(m.AssetDenom))
	}
	if m.PositionEffect != 0 {
		n += 1 + sovOrderPlacement(uint64(m.PositionEffect))
	}
	if m.OrderType != 0 {
		n += 1 + sovOrderPlacement(uint64(m.OrderType))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovOrderPlacement(uint64(l))
	return n
}

func sovOrderPlacement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderPlacement(x uint64) (n int) {
	return sovOrderPlacement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderPlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionDirection", wireType)
			}
			m.PositionDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionDirection |= PositionDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			m.PriceDenom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceDenom |= Denom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			m.AssetDenom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetDenom |= Denom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionEffect", wireType)
			}
			m.PositionEffect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionEffect |= PositionEffect(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= OrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderPlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderPlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderPlacement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderPlacement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderPlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderPlacement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderPlacement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderPlacement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderPlacement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderPlacement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderPlacement = fmt.Errorf("proto: unexpected end of group")
)
