// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dex/pair.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pair struct {
	PriceDenom string                                  `protobuf:"bytes,1,opt,name=priceDenom,proto3" json:"price_denom"`
	AssetDenom string                                  `protobuf:"bytes,2,opt,name=assetDenom,proto3" json:"asset_denom"`
	Ticksize   *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=ticksize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tick_size"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4350ebee878f69a, []int{0}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return m.Size()
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func (m *Pair) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

func (m *Pair) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

type BatchContractPair struct {
	ContractAddr string  `protobuf:"bytes,1,opt,name=contractAddr,proto3" json:"contract_addr"`
	Pairs        []*Pair `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs"`
}

func (m *BatchContractPair) Reset()         { *m = BatchContractPair{} }
func (m *BatchContractPair) String() string { return proto.CompactTextString(m) }
func (*BatchContractPair) ProtoMessage()    {}
func (*BatchContractPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4350ebee878f69a, []int{1}
}
func (m *BatchContractPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchContractPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchContractPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchContractPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchContractPair.Merge(m, src)
}
func (m *BatchContractPair) XXX_Size() int {
	return m.Size()
}
func (m *BatchContractPair) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchContractPair.DiscardUnknown(m)
}

var xxx_messageInfo_BatchContractPair proto.InternalMessageInfo

func (m *BatchContractPair) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *BatchContractPair) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*Pair)(nil), "seiprotocol.seichain.dex.Pair")
	proto.RegisterType((*BatchContractPair)(nil), "seiprotocol.seichain.dex.BatchContractPair")
}

func init() { proto.RegisterFile("dex/pair.proto", fileDescriptor_d4350ebee878f69a) }

var fileDescriptor_d4350ebee878f69a = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xf6, 0xfb, 0x10, 0x75, 0xf9, 0xa3, 0x46, 0x0c, 0x11, 0x83, 0x53, 0x75, 0x40,
	0x5d, 0x6a, 0x4b, 0x20, 0xc4, 0x88, 0x08, 0x95, 0x58, 0x51, 0xd8, 0x58, 0x2a, 0xd7, 0xb6, 0x5a,
	0xab, 0xb4, 0x8e, 0x6c, 0x23, 0x15, 0x5e, 0x81, 0x85, 0x17, 0x62, 0x67, 0xec, 0x88, 0x18, 0x22,
	0xd4, 0x6e, 0x79, 0x0a, 0x64, 0x27, 0xa1, 0x65, 0x60, 0xf2, 0xbd, 0xe7, 0x9e, 0xdf, 0x8d, 0xce,
	0x0d, 0x3c, 0xe0, 0x62, 0x41, 0x52, 0x2a, 0x35, 0x4e, 0xb5, 0xb2, 0x2a, 0x08, 0x8d, 0x90, 0xbe,
	0x62, 0xea, 0x01, 0x1b, 0x21, 0xd9, 0x84, 0xca, 0x39, 0xe6, 0x62, 0x71, 0x7c, 0x34, 0x56, 0x63,
	0xe5, 0x47, 0xc4, 0x55, 0x85, 0xbf, 0xfb, 0x06, 0xe0, 0xbf, 0x5b, 0x2a, 0x75, 0x40, 0x20, 0x4c,
	0xb5, 0x64, 0x62, 0x20, 0xe6, 0x6a, 0x16, 0x82, 0x0e, 0xe8, 0x35, 0xe3, 0xc3, 0x3c, 0x8b, 0x5a,
	0x5e, 0x1d, 0x72, 0x27, 0x27, 0x5b, 0x16, 0x07, 0x50, 0x63, 0x84, 0x2d, 0x80, 0xfa, 0x06, 0xf0,
	0x6a, 0x05, 0x6c, 0x2c, 0xc1, 0x1d, 0xdc, 0xb5, 0x92, 0x4d, 0x8d, 0x7c, 0x16, 0x61, 0xc3, 0xdb,
	0x2f, 0x3e, 0xb3, 0xe8, 0x64, 0x2c, 0xed, 0xe4, 0x71, 0x84, 0x99, 0x9a, 0x11, 0xa6, 0xcc, 0x4c,
	0x99, 0xf2, 0xe9, 0x1b, 0x3e, 0x25, 0xf6, 0x29, 0x15, 0x06, 0x0f, 0x04, 0xcb, 0xb3, 0xa8, 0xe9,
	0xe8, 0xa1, 0xc3, 0x93, 0x9f, 0x45, 0xdd, 0x17, 0x00, 0xdb, 0x31, 0xb5, 0x6c, 0x72, 0xad, 0xe6,
	0x56, 0x53, 0x66, 0x7d, 0x98, 0x73, 0xb8, 0xc7, 0xca, 0xfe, 0x8a, 0x73, 0x5d, 0xc6, 0x69, 0xe7,
	0x59, 0xb4, 0x5f, 0xe9, 0x43, 0xca, 0xb9, 0x4e, 0x7e, 0xd9, 0x82, 0x4b, 0xf8, 0xdf, 0x9d, 0xd2,
	0x84, 0xf5, 0x4e, 0xa3, 0xd7, 0x3a, 0x45, 0xf8, 0xaf, 0x63, 0x62, 0xf7, 0x95, 0xb8, 0x99, 0x67,
	0x51, 0x01, 0x24, 0xc5, 0x13, 0xdf, 0xbc, 0xaf, 0x10, 0x58, 0xae, 0x10, 0xf8, 0x5a, 0x21, 0xf0,
	0xba, 0x46, 0xb5, 0xe5, 0x1a, 0xd5, 0x3e, 0xd6, 0xa8, 0x76, 0xdf, 0xdf, 0x8a, 0x69, 0x84, 0xec,
	0x57, 0x6b, 0x7d, 0xe3, 0xf7, 0x92, 0x05, 0x71, 0xff, 0xd2, 0x27, 0x1e, 0xed, 0xf8, 0xf9, 0xd9,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0x1a, 0x77, 0xd9, 0xdf, 0x01, 0x00, 0x00,
}

func (m *Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ticksize != nil {
		{
			size := m.Ticksize.Size()
			i -= size
			if _, err := m.Ticksize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintPair(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintPair(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchContractPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchContractPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchContractPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintPair(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if m.Ticksize != nil {
		l = m.Ticksize.Size()
		n += 1 + l + sovPair(uint64(l))
	}
	return n
}

func (m *BatchContractPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovPair(uint64(l))
		}
	}
	return n
}

func sovPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPair(x uint64) (n int) {
	return sovPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticksize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Ticksize = &v
			if err := m.Ticksize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchContractPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchContractPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchContractPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, &Pair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPair = fmt.Errorf("proto: unexpected end of group")
)
