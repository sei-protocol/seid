syntax = "proto3";
package seiprotocol.seichain.dex;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "dex/order_placement.proto";
import "dex/order_cancellation.proto";
import "dex/pair.proto";
import "dex/contract.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/sei-protocol/sei-chain/x/dex/types";

// Msg defines the Msg service.
service Msg {
  rpc PlaceOrders(MsgPlaceOrders) returns (MsgPlaceOrdersResponse);
  rpc CancelOrders(MsgCancelOrders) returns (MsgCancelOrdersResponse);
  rpc Liquidate(MsgLiquidation) returns (MsgLiquidationResponse);
  rpc RegisterContract(MsgRegisterContract) returns(MsgRegisterContractResponse);
  // privileged endpoints below

// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgPlaceOrders {
  string creator = 1;
  repeated OrderPlacement orders = 2;
  string contractAddr = 3;
  repeated cosmos.base.v1beta1.Coin funds = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgPlaceOrdersResponse {
  repeated uint64 orderIds = 1;
}

message MsgCancelOrders {
  string creator = 1;
  repeated OrderCancellation orderCancellations = 2;
  string contractAddr = 3;
}

message MsgCancelOrdersResponse {}

message MsgLiquidation {
  string creator = 1;
  string accountToLiquidate = 2;
  string contractAddr = 3;
}

message MsgLiquidationResponse {}

message MsgRegisterContract {
  string creator = 1;
  ContractInfo contract = 2;
}

message MsgRegisterContractResponse {}

// this line is used by starport scaffolding # proto/tx/message